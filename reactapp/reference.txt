----- full stack developer -----

	----- Es6 -----
	
		

	----- html5 apis -----
	
		fetch api
		diffference between xmlHttpRequest and fetch api

	----- React ---

		----- react basics -----
		
			types of components in react
			
				1 ) class based component for state management( container components )
				2 ) functional component for presentational purpose( presentational components )
				
				----- before react 16.8 functional components did not have any state management mechanism
				
				----- component lifecycle methods
				
					constructor
					getDerivedStateFromProps
					getSnapshotBeforeUpdate
					componentDidCache
					componentWillUnmount
					shouldComponentUpdate
					componentDidUpdatecomponentdidMount
					render
					
					----- component lifecycle - creation
					
						constructor(props)
							do - set up state
							don't - make ajax request or store data in local storage cause unnecessary re-renders
						
						static getDerivedStateFromProps(16.3)
							do - sync state
							dont't - side effect
							
						render
							prepare and structure jsx code
							
						render child components
						
						componentDidMount()
							do - make ajax request
							don't - update state as it triggers re-render
							
					----- component lifecycle - updation when ( props or state change )
					
						----- props and state change are the two triggers in react which makes react to re-evaluate the component
						
						getDerivedStateFromProps(props,state)
						
						shouldComponentUpdate(nextprops,nextstate)
						
						render()
						
						update Child Component Props
						
						getSnapshotBeforeUpdate(prevProps,prevState)
						
						componentDidUpadte
							--- can make http request
							don't update teh state as it triggers re-render f the component , it will run the infinite loop if u change the state of the component in this lifecycle method
							
		----- React Hooks
		
			import { useEffect } from 'react'
		
			----- add it in functional component body
			
				usEffect(()=>{ // function passed to useEffect will run for every render cycle of the functional component
					console.log()
					// u can maki http calls in here
				
				----- re-render does't mean re-rendering the real DOM, but the virtual dom instead.
			
			----- controling the behaviour of the useEffect
				
				useEffect(() =>{
					setTimeout(() => {
						
					},1000)
				},[props.persons])
				
				
			----- exectute the react hook when component renders for the first time
			
				useEffect(() =>{
					setTimeout(() => {
						
					},1000)
				},[])
				
			----- cleanUp work in class components and functional compoents(UseEffect)
			
				componentWillUnmount() in class
				
				useEffect(() => {
				
					return () => {
						when the component unmounts
						console.log('clean up work');
					}
					
				},[]) 
				
			----- shouldComponentUpdate optimization
			
				shouldComponentUpdate(nextProps,nextState){
					next.persons !== this.props.persons
						return true
					else
						return false
				}

				
		----- axios -----
		
			npm install --save axios
			
			
			----- get request -----
			
				componentDidMount(){
					axios.get('url')
				}
				
				----- if you want make an ajax request when the components revieves valid data by props and set the state of the 	component , you should use componentDidUpdate lifecycle method.
				
			----- post request -----
			
				axios.post('url',{payload}).then(r => console.log(r));
				
			----- Delete Request -----
			
				axios.delete('url'+ id).then(r => console.log(r));
				
			----- Handling Errors Locally -----
			
				axios.then().catch(err => console.log(err));
			
			----- interceptors
			
				uses:-
				
					to set common header to each request ,
					to log responses
					want to handle erros globally
			
				index.js file
				
					import axios from 'axios'
					
					axios.interceptors.request.use(request => {
						console.log(request);
						return request
					},error => {
						console.log(error);
						Promise.reject(error);
					})
				
					axios.inteceptors.response.use(response => {
						
					},error => )
					
					----- removing the interceptors
					
					var myInterceptor = axios.interceptors.request.use(function () {/*...*/});
					axios.interceptors.request.eject(myInterceptor);

			----- Default Global Configuration for axios
			
				axios.defaults.baseURL = 'url'
				axios.defaults.headers.common['Authorization] = 'auth token'
				axios.defaults.headers.post['content-Type] = 'application/json'
				
			----- Creating and Using Axios Instance
			
				axios.js (At the root level)
				
					import axios from axios;
					
					const instance = axios.create({
						baseURL : 'URL'
					})
					
					instance.defaults.headers.comon['Authorization'] = 'Auth Token From Instance'
					
					export default instance;
					
					---- usage
					
						import axios from axios
				
		runtime module loading in react
		redux
		react hooks

			----- useState() hook

				import { useState } from 'react'
				const inputState = useState('');
				const inputchangeHandler = (event) => {
					inputState[1](event.target.value);
				};
				return <React.Fragment>
					<input type="text" 
						placeholder="todo"
						value={inputState[0]}
						onChange={inputchangeHandler} />
					<button type="button">Add</button>
				</React.Fragment>

			----- Adding Array Destructuring

				const [ todoName , setTodoName ] = useState('');

			----- using multiple state

				const [todoList , setTodoList ]	= useState([]);

				const todoAddHandler = () => {
					setTodoList(todoList.concat(todoName));
				}		

			----- using one state instead

			----- rules of hooks

				

		context api
		forms in react
		
	----- Angular -----
	
	----- React Native -----
	
	----- node.js -----
	
		----- mangoose

				npm install --save mongoose
			
			----- main.js


				const mongoose = require('mongoose')
				mongoose.connect('url').then(() => {

				}).catch(() => {});

			----- product.js

				const mongoose = require('mongoose');

				const schema = mongoose.Scheme;

				const productSchema = new Schema({
					title:{
						type:string,
						required:true
					},
					price:{
						type:Number,
						required:true
					},
					description:{
						type:string,
						required:true
					},
					imageUrl:{
						type:string,
						required:true
					},
				})

			----- saving data through mongoose

				module.export = mongoose.model('Product',productSchema)

				----- admin.js

					new Product({
						title,
						price,
						description,
						imageUrl
					}).save().then();

			----- fetching data throught mongoose

				Product.find() // return an array

			----- fetching details from mongoose(filtering)

				Product.findById(prodId)

			----- updating a product

				Product.findById(prodId).then(product => {
					product.title = updatedTitle;
					product.price = updatedPrice;
					product.description = updateDesc;
					product.imageUrl = updatedImageUrl;
					return Product.save()
				})
				.then(() => {
					
				})

			----- deleting data

				Product.findByIdAndRemove(prodId).then(() => {

				})

			----- relations in mongoose

				----- user.js

					const mongoose = require('mongoose');

					const Schema = mongoose.Schema;

					const userSchema = new Schema({
						name:{

						},
						email:{

						},
						cart:{
							items:[{
									productId:{type:Schema.Types.ObjectId},
									quantity:{type:number,required:true}
							]
						}
					})

					export default mongoose.model('user',userschema)

			----- references in mongoose

				userId: {
					type:Schema.Types.ObjectId,
					ref:'User',
					requred:true
				}

				----- new Product storing reference

					new Product({
						title:title,
						price:price,
						description:description,
						imageUrl : imageUrl,
						userId : request.user._id
					}).save()

			----- fetching relations in mongoose

				Product.
				find().
				select('title price -Id').
				populate('userId','name').
				then()

		----- add to cart

		userSchema.methods.addToCart = function(product) {
			
		}

			----- shop.js

			req.user.add

		req.user.populate('cart.items.productId').execpopulate()

		----- delete cart

		userSchema.method.removeFromCaart = function(productId){
			return this.save()
		}

		----- ordering

						

	----- Mongo.Db -----
	
	----- C# Asp.net MVC -----
	
	----- python -----
	
	----- next.js -----
	
	